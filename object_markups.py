from aiogram import types

from database import Client
from config import DB_PASSWORD
from states import Item, Road, Horse
from utils import check_health, check_in_dungeon

from datetime import datetime


async def show_roads(player_info: dict, message: types.Message):
    # TODO: check if player in dungeon or in a raid
    client = Client(DB_PASSWORD)
    if check_in_dungeon(player_info, client):
        return await message.answer('–í–∏ –≤—Å–µ —â–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –ø—ñ–¥–∑–µ–º–µ–ª–ª—è, –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—á–µ–∫–∞—Ç–∏')
    roads = client.get_all('roads', {'from_obj': player_info['current_state']})
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for road in roads:
        markup.add(types.KeyboardButton(f'{road["name"]}'))
    markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
    await Road.first()
    await message.answer('–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ü–µ, –∫—É–¥–∏ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏—Å—å', reply_markup=markup)


async def create_markup_for_shop(items: list):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for item in items:
        markup.add(types.KeyboardButton(f'–ö—É–ø–∏—Ç–∏ {item["name"]} –∑–∞ {item["price"]}'))
    markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
    return markup


async def create_recover_markup(characteristic: str):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text=f'–û—Ç—Ä–∏–º–∞—Ç–∏ 5 –æ–¥–∏–Ω–∏—Ü—å {characteristic} –∑–∞ 5 –º–æ–Ω–µ—Ç',
                                          callback_data=f'5{characteristic}5'))
    markup.add(types.InlineKeyboardButton(text=f'–û—Ç—Ä–∏–º–∞—Ç–∏ 15 –æ–¥–∏–Ω–∏—Ü—å {characteristic} –∑–∞ 13 –º–æ–Ω–µ—Ç',
                                          callback_data=f'15{characteristic}13'))
    markup.add(types.InlineKeyboardButton(text=f'–û—Ç—Ä–∏–º–∞—Ç–∏ 50 –æ–¥–∏–Ω–∏—Ü—å {characteristic} –∑–∞ 45 –º–æ–Ω–µ—Ç',
                                          callback_data=f'50{characteristic}45'))
    markup.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',
                                          callback_data='back'))
    return markup


async def show_items(player_info: dict, message: types.Message):
    client = Client(DB_PASSWORD)
    items = client.get_all('items', {'city': player_info['current_state']})
    markup = await create_markup_for_shop(items)
    await Item.first()
    return await message.answer('–û–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –∫—É–ø–∏—Ç–∏', reply_markup=markup)


async def show_horses(player_info: dict, message: types.Message):
    client = Client(DB_PASSWORD)
    horses = client.get_all('horses', {'city': player_info['current_state']})
    markup = await create_markup_for_shop(horses)
    await Horse.first()
    await message.answer('–û–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –∫—É–ø–∏—Ç–∏', reply_markup=markup)


async def enter_academy(player_info: dict, message: types.Message):
    markup = await create_recover_markup('intelligence')
    await message.answer(f'–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∞–∫–∞–¥–µ–º—ñ—ó –º—ñ—Å—Ç–∞ {player_info["current_state"]}'
                         f' —ñ —É –≤–∞—Å {player_info["intelligence"]} —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É. –í–∏ —Ö–æ—á–µ—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è –≤ –∞–∫–∞–¥–µ–º—ñ—ó?',
                         reply_markup=markup)


async def enter_temple(player_info: dict, message: types.Message):
    markup = await create_recover_markup('health')
    await message.answer(f'–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å —É —Ö—Ä–∞–º—ñ –º—ñ—Å—Ç–∞ {player_info["current_state"]}'
                         f' —ñ —É –≤–∞—Å {player_info["health"]} –∑–¥–æ—Ä–æ–≤\'—è. –í–∏ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –π–æ–≥–æ?',
                         reply_markup=markup)


async def enter_tavern(player_info: dict, message: types.Message):
    markup = await create_recover_markup('energy')
    await message.answer(f'–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å —É —Ç–∞–≤–µ—Ä–Ω—ñ –º—ñ—Å—Ç–∞ {player_info["current_state"]}'
                         f' —ñ —É –≤–∞—Å {player_info["energy"]} –µ–Ω–µ—Ä–≥—ñ—ó. –í–∏ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ —ó—ó?',
                         reply_markup=markup)


async def show_dungeon(player_info: dict, message: types.Message):
    client = Client(DB_PASSWORD)
    dungeon = client.get({'name': player_info['current_state']}, 'dungeons')
    text = f'üåá–ü—ñ–¥–∑–µ–º–µ–ª–ª—è - {dungeon["name"]}\n\nüìñ{dungeon["description"]}\n\n' \
           f'–ë—É–¥–µ –æ—Ç—Ä–∏–º–∞–Ω–æ —à–∫–æ–¥–∏ - {dungeon["damage"]}\n\n' \
           f'üíµ–ë—É–¥–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –Ω–∞–≥–æ—Ä–æ–¥–∏ - {dungeon["treasure"]}\n\n' \
           f'‚åö–ß–∞—Å –≤–∑—è—Ç—Ç—è –ø—ñ–¥–∑–µ–º–µ–ª–ª—è - {dungeon["base_time"]} —Å'
    await message.answer(text)


async def enter_dungeon(player_info: dict, message: types.Message):
    client = Client(DB_PASSWORD)
    if check_in_dungeon(player_info, client):
        return await message.answer('–í–∏ –≤–∂–µ —É –ø—ñ–¥–∑–µ–º–µ–ª–ª—ñ')
    dungeon = client.get({'name': player_info['current_state']}, 'dungeons')
    if check_health(player_info, dungeon['damage']):
        date = datetime.now()
        members = dungeon['members']
        members[player_info['name']] = date
        user_id = player_info['user_id']
        _ = client.update({'name': player_info['current_state']}, {'members': members}, 'dungeons')
        _ = client.update({'user_id': user_id}, {'health': player_info['health'] - dungeon['damage'],
                                                 'money': player_info['money'] + dungeon['treasure']},
                          'players')
        return await message.answer(f'–í–∏ –ø–æ—á–∞–ª–∏ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –ø—ñ–¥–∑–µ–º–µ–ª–ª—è. '
                                    f'–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å —É –º—ñ—Å—Ç–æ –≤–∏ –º–æ–∂–µ—Ç–µ —á–µ—Ä–µ–∑ {dungeon["base_time"]} —Å–µ–∫—É–Ω–¥')
    return await message.answer('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑–¥–æ—Ä–æ–≤\'—è. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è —É –º—ñ—Å—Ç–æ, —â–æ–± –≤–∏–ª—ñ–∫—É–≤–∞—Ç–∏—Å—å')
