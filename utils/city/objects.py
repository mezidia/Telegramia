from aiogram.types import Message
from aiogram.dispatcher.filters.state import StatesGroupMeta

from utils.db_api.database import Client
from utils.city.checks import check_in_raid, check_in_dungeon, check_health, check_was_in_raid
from utils.city.player_processes import apply_items
from utils.misc.types import types
from data.config import DB_PASSWORD
from states import road, item, horse
from keyboards.default import roads as roads_markup, items as items_markup
from keyboards.inline import recover

from datetime import datetime


async def show_roads(player_info: dict, message: Message) -> Message:
    client = Client(DB_PASSWORD)
    if check_in_dungeon(player_info, client) or check_in_raid(player_info, client):
        return await message.answer("–í–∏ –≤—Å–µ —â–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –∑–∞–≤–¥–∞–Ω–Ω—è, –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—á–µ–∫–∞—Ç–∏")
    roads = client.get_all("roads", {"from_obj": player_info["current_state"]})
    markup = roads_markup.create_markup(roads)
    await road.Road.first()
    return await message.answer(
        "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ü–µ, –∫—É–¥–∏ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏—Å—å", reply_markup=markup
    )

async def create_markup_for_shop(
    collection_name: str, city_name: str, state: StatesGroupMeta, message: Message, type: str = None
) -> Message:
    client = Client(DB_PASSWORD)
    query = {"city": city_name}
    if type:
        query["type"] = type
    items = client.get_all(collection_name, query)
    markup = items_markup.create_markup(items)
    await state.first()
    return await message.answer(
        "–û–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –∫—É–ø–∏—Ç–∏", reply_markup=markup
    )


async def create_recover_markup(
    characteristic: str, text: str, message: Message
) -> Message:
    markup = recover.create_markup(characteristic)
    return await message.answer(
        text,
        reply_markup=markup,
    )


async def show_items(player_info: dict, message: Message, type: str) -> Message:
    return await create_markup_for_shop(
        "items", player_info["current_state"], item.Item, message, type
    )

# TODO: do something with the variable
async def show_item_types(player_info: dict, message: Message) -> Message:
    await item.Item.first()
    markup = items_markup.create_markup_for_types(types.keys())
    return await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç—É", reply_markup=markup)


async def show_horses(player_info: dict, message: Message) -> Message:
    return await create_markup_for_shop(
        "horses", player_info["current_state"], horse.Horse, message
    )


async def enter_academy(player_info: dict, message: Message) -> Message:
    return await create_recover_markup(
        "intelligence",
        f'–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∞–∫–∞–¥–µ–º—ñ—ó –º—ñ—Å—Ç–∞ {player_info["current_state"]}'
        f' —ñ —É –≤–∞—Å {player_info["intelligence"]} —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É. –í–∏ —Ö–æ—á–µ—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è –≤ –∞–∫–∞–¥–µ–º—ñ—ó?',
        message,
    )


async def enter_temple(player_info: dict, message: Message):
    return await create_recover_markup(
        "health",
        f'–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å —É —Ö—Ä–∞–º—ñ –º—ñ—Å—Ç–∞ {player_info["current_state"]}'
        f' —ñ —É –≤–∞—Å {player_info["health"]} –∑–¥–æ—Ä–æ–≤\'—è. –í–∏ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –π–æ–≥–æ?',
        message,
    )


async def enter_tavern(player_info: dict, message: Message):
    markup = await create_recover_markup(
        "energy",
        f'–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å —É —Ç–∞–≤–µ—Ä–Ω—ñ –º—ñ—Å—Ç–∞ {player_info["current_state"]}'
        f' —ñ —É –≤–∞—Å {player_info["energy"]} –µ–Ω–µ—Ä–≥—ñ—ó. –í–∏ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ —ó—ó?',
        message,
    )


async def show_dungeon(player_info: dict, message: Message):
    client = Client(DB_PASSWORD)
    dungeon = client.get({"name": player_info["current_state"]}, "dungeons")
    text = (
        f'üåá–ü—ñ–¥–∑–µ–º–µ–ª–ª—è - {dungeon["name"]}\n\nüìñ{dungeon["description"]}\n\n'
        f'–ë—É–¥–µ –æ—Ç—Ä–∏–º–∞–Ω–æ —à–∫–æ–¥–∏ - {dungeon["damage"]}\n\n'
        f'üíµ–ë—É–¥–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –Ω–∞–≥–æ—Ä–æ–¥–∏ - {dungeon["treasure"]}\n\n'
        f'‚åö–ß–∞—Å –≤–∑—è—Ç—Ç—è –ø—ñ–¥–∑–µ–º–µ–ª–ª—è - {dungeon["base_time"]} —Å'
    )
    await message.answer(text)


async def enter_dungeon(player_info: dict, message: Message):
    client = Client(DB_PASSWORD)
    if check_in_dungeon(player_info, client):
        return await message.answer("–í–∏ –≤–∂–µ —É –ø—ñ–¥–∑–µ–º–µ–ª–ª—ñ")
    dungeon = client.get({"name": player_info["current_state"]}, "dungeons")
    if check_health(player_info, dungeon["damage"]):
        date = datetime.now()
        members = dungeon["members"]
        members[player_info["name"]] = date
        player_chars = apply_items(player_info, client)
        user_id = player_info["user_id"]
        client.update(
            {"name": player_info["current_state"]}, {"members": members}, "dungeons"
        )
        client.update(
            {"user_id": user_id},
            {
                "health": player_info["health"]
                - dungeon["damage"]
                + player_chars["strength"] * 0.15,
                "money": player_info["money"]
                + dungeon["treasure"]
                + player_chars["intuition"] * 0.15,
                "experience": player_info["experience"] + dungeon["treasure"] * 0.25,
            },
            "players",
        )
        return await message.answer(
            f"–í–∏ –ø–æ—á–∞–ª–∏ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –ø—ñ–¥–∑–µ–º–µ–ª–ª—è. "
            f'–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å —É –º—ñ—Å—Ç–æ –≤–∏ –º–æ–∂–µ—Ç–µ —á–µ—Ä–µ–∑ {dungeon["base_time"]} —Å–µ–∫—É–Ω–¥'
        )
    return await message.answer(
        "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑–¥–æ—Ä–æ–≤'—è. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è —É –º—ñ—Å—Ç–æ, —â–æ–± –≤–∏–ª—ñ–∫—É–≤–∞—Ç–∏—Å—å"
    )


async def show_raid(player_info: dict, message: Message):
    client = Client(DB_PASSWORD)
    raid = client.get({"name": player_info["current_state"]}, "raids")
    text = f'–†–µ–π–¥ - {raid["name"]}\n\nüìñ{raid["description"]}\n\n'
    raid_levels = client.get_all(
        "raid_levels", {"raid_name": player_info["current_state"]}
    )
    for raid_level in raid_levels:
        text += (
            f'{raid_level["level"]}. –†—ñ–≤–µ–Ω—å —Ä–µ–π–¥—É - {raid_level["name"]}\n\nüìñ{raid_level["description"]}\n\n'
            f'–ë—É–¥–µ –æ—Ç—Ä–∏–º–∞–Ω–æ —à–∫–æ–¥–∏ - {raid_level["damage"]}\n\n'
            f'üíµ–ë—É–¥–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –Ω–∞–≥–æ—Ä–æ–¥–∏ - {raid_level["treasure"]}\n\n'
            f'‚åö–ß–∞—Å –≤–∑—è—Ç—Ç—è –ø—ñ–¥–∑–µ–º–µ–ª–ª—è - {raid_level["base_time"]} —Å\n\n'
        )
    await message.answer(text)


async def show_raid_level(player_info: dict, message: Message):
    client = Client(DB_PASSWORD)
    raid = client.get({"name": player_info["current_state"]}, "raids")
    raid_members = raid["members"]
    try:
        player_in_raid_info = raid_members[player_info["name"]]
    except KeyError:
        return await message.answer("–í–∏ —â–µ –Ω–µ —É–≤—ñ–π—à–ª–∏ —É –ø—ñ–¥–∑–µ–º–µ–ª–ª—è")
    if raid_level := client.get(
        {
            "raid_name": player_info["current_state"],
            "level": player_in_raid_info["level"] + 1,
        },
        "raid_levels",
    ):
        text = (
            f'–†—ñ–≤–µ–Ω—å —Ä–µ–π–¥—É - {raid_level["name"]}\n\nüìñ{raid_level["description"]}\n\n'
            f'–ë—É–¥–µ –æ—Ç—Ä–∏–º–∞–Ω–æ —à–∫–æ–¥–∏ - {raid_level["damage"]}\n\n'
            f'‚åö–ß–∞—Å –≤–∑—è—Ç—Ç—è –ø—ñ–¥–∑–µ–º–µ–ª–ª—è - {raid_level["base_time"]} —Å'
        )
        photo_url = f"https://raw.githubusercontent.com/mezgoodle/images/master/telegramia_{raid_level['name']}.jpg"
        return await message.answer_photo(photo_url, text)
    return await message.answer("–ë—ñ–ª—å—à–µ —Ä—ñ–≤–Ω—ñ–≤ –Ω–µ–º–∞—î")


async def enter_raid(player_info: dict, message: Message):
    client = Client(DB_PASSWORD)
    if check_in_raid(player_info, client):
        return await message.answer("–í–∏ –≤–∂–µ —É –ø—ñ–¥–∑–µ–º–µ–ª–ª—ñ")
    raid = client.get({"name": player_info["current_state"]}, "raids")
    if level := check_was_in_raid(player_info, client):
        level += 1
        if raid_level := client.get(
            {"raid_name": raid["name"], "level": level}, "raid_levels"
        ):
            pass
        else:
            return await message.answer("–í–∏ –≤–∂–µ –ø—Ä–æ–π—à–ª–∏ —É—Å—ñ —Ä—ñ–≤–Ω—ñ —Ä–µ–π–¥—É")
    else:
        raid_level = client.get({"raid_name": raid["name"], "level": 1}, "raid_levels")
    if check_health(player_info, raid_level["damage"]):
        date = datetime.now()
        members = raid["members"]
        player_chars = apply_items(player_info, client)
        members[player_info["name"]] = {"time": date, "level": raid_level["level"]}
        user_id = player_info["user_id"]
        client.update(
            {"name": player_info["current_state"]}, {"members": members}, "raids"
        )
        client.update(
            {"user_id": user_id},
            {
                "health": player_info["health"]
                - raid_level["damage"]
                + player_chars["strength"] * 0.15,
                "money": player_info["money"]
                + raid_level["treasure"]
                + player_chars["intelligence"] * 0.15,
                "experience": player_info["experience"]
                + raid_level["treasure"] * 0.25 * raid_level["level"],
            },
            "players",
        )
        return await message.answer(
            f"–í–∏ –ø–æ—á–∞–ª–∏ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è {raid_level['level']} —Ä–µ–π–¥—É. "
            f'–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å —É –º—ñ—Å—Ç–æ –≤–∏ –º–æ–∂–µ—Ç–µ —á–µ—Ä–µ–∑ {raid_level["base_time"]} —Å–µ–∫—É–Ω–¥'
        )
    return await message.answer(
        "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑–¥–æ—Ä–æ–≤'—è. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è —É –º—ñ—Å—Ç–æ, —â–æ–± –≤–∏–ª—ñ–∫—É–≤–∞—Ç–∏—Å—å"
    )



city_objects = [
    {"name": "market", "ukr_name": "–†–∏–Ω–æ–∫", "function": show_item_types},
    {"name": "academy", "ukr_name": "–ê–∫–∞–¥–µ–º—ñ—è", "function": enter_academy},
    {"name": "temple", "ukr_name": "–•—Ä–∞–º", "function": enter_temple},
    {"name": "tavern", "ukr_name": "–¢–∞–≤–µ—Ä–Ω–∞", "function": enter_tavern},
    {"name": "menagerie", "ukr_name": "–°—Ç–æ–π–ª–æ", "function": show_horses},
    {"name": "roads", "ukr_name": "–î–æ—Ä–æ–≥–∏", "function": show_roads},
    {
        "name": "dungeon_info",
        "ukr_name": "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—ñ–¥–∑–µ–º–µ–ª–ª—è",
        "function": show_dungeon,
    },
    {
        "name": "dungeon_enter",
        "ukr_name": "–£–≤—ñ–π—Ç–∏ —É –ø—ñ–¥–∑–µ–º–µ–ª–ª—è",
        "function": enter_dungeon,
    },
    {"name": "raid_enter", "ukr_name": "–£–≤—ñ–π—Ç–∏ —É —Ä–µ–π–¥", "function": enter_raid},
    {"name": "raid_info", "ukr_name": "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–µ–π–¥", "function": show_raid},
    {
        "name": "raid_level_info",
        "ukr_name": "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—ñ–≤–µ–Ω—å —Ä–µ–π–¥—É",
        "function": show_raid_level,
    },
]
