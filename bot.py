import logging

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext

from config import TELEGRAM_TOKEN, DB_PASSWORD
from filters import IsPlayer
from database import Client

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# Activate filters
dp.filters_factory.bind(IsPlayer, event_handlers=[dp.message_handlers])

city_objects = [
    {
        'name': 'market',
        'ukr_name': '–†–∏–Ω–æ–∫'
    },
    {
        'name': 'academy',
        'ukr_name': '–†–∏–Ω–æ–∫'
    },
    {
        'name': 'temple',
        'ukr_name': '–•—Ä–∞–º'
    },
    {
        'name': 'tavern',
        'ukr_name': '–¢–∞–≤–µ—Ä–Ω–∞'
    },
    {
        'name': 'menagerie',
        'ukr_name': '–°—Ç–æ–π–ª–æ'
    },
]


# States
class Player(StatesGroup):
    user_id = State()
    telegram_name = State()
    name = State()
    level = State()
    experience = State()
    health = State()
    energy = State()
    strength = State()
    agility = State()
    intuition = State()
    intelligence = State()
    hero_class = State()
    nation = State()
    money = State()
    items = State()
    mount = State()
    current_state = State()


async def create_keyboard(collection_name: str, field_name: str):
    client = Client(DB_PASSWORD, 'Telegramia', collection_name)
    objects = client.get_all()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttons = []
    for object_ in objects:
        btn = types.KeyboardButton(object_[field_name])
        buttons.append(btn)
    markup.add(*buttons)
    return markup


async def prepare_player_info(data):
    items = '–ø—É—Å—Ç–æ'
    if data['items']:
        items = ''
        for item in data['items']:
            items += f'{item}, '
    text = f'–Ü–≥—Ä–æ–≤–µ —ñ–º\'—è: *{data["name"]}*\nüéñ–†—ñ–≤–µ–Ω—å: *{data["level"]}*\nüåü–î–æ—Å–≤—ñ–¥: *{data["experience"]}*\n‚ù§–ó–¥–æ—Ä–æ–≤\'—è: ' \
           f'*{data["health"]}*\n–ï–Ω–µ—Ä–≥—ñ—è: *{data["energy"]}*\n\nüí™–°–∏–ª–∞: *{data["strength"]}*\n‚ö°–°–ø—Ä–∏—Ç–Ω—ñ—Å—Ç—å: *{data["agility"]}*\n' \
           f'üéØ–Ü–Ω—Ç—É—ó—Ü—ñ—è: *{data["intuition"]}*\nüéì–Ü–Ω—Ç–µ–ª–µ–∫—Ç: *{data["intelligence"]}*\nüíü–ö–ª–∞—Å: *{data["hero_class"]}*\n\n' \
           f'ü§ù–ù–∞—Ü—ñ—è: *{data["nation"]}*\nüí∞–ì—Ä–æ—à—ñ: *{data["money"]}*\nüéí–†–µ—á—ñ: *{items}*\n' \
           f'üê∫–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: *{data["mount"]["name"] if data["mount"]["name"] else "–Ω–µ–º–∞—î"}*\n' \
           f'\n–ü–æ—Ç–æ—á–Ω–µ –º—ñ—Å—Ü–µ: *{data["current_state"]}*'
    return text


async def show_city_info(city_name: str, chat_id: str):
    photo_url = f'https://raw.githubusercontent.com/mezgoodle/images/master/telegramia_{city_name}.jpg'
    client = Client(DB_PASSWORD, 'Telegramia', 'cities')
    city = client.get({'name': city_name})
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=3)
    buttons = []
    for city_object in city_objects:
        if city[city_object['name']]:
            buttons.append(types.KeyboardButton(city_object['ukr_name']))
    markup.add(*buttons)
    await bot.send_photo(chat_id, photo_url, f'–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å —É –º—ñ—Å—Ç—ñ {city_name}', reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data)
async def process_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    client = Client(DB_PASSWORD, 'Telegramia', 'players')
    if callback_query.data == 'No':
        client.delete({'user_id': user_id})
        await Player.nation.set()
        markup = await create_keyboard('countries', 'name')
        return await bot.send_message(callback_query.from_user.id, '–û–±–µ—Ä—ñ—Ç—å –∫—Ä–∞—ó–Ω—É', reply_markup=markup)
    else:
        city_name = client.get({'user_id': user_id})['current_state']
        await show_city_info(city_name, callback_query.from_user.id)


# Use state '*' if I need to handle all states
@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(Text(equals='cancel', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext) -> types.Message:
    """
    Allow user to cancel any action
    """
    current_state = await state.get_state()
    if current_state is None:
        return await message.reply('–ü—Ä–æ—Ü–µ—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–µ –ø–æ—á–∏–Ω–∞–≤—Å—è.')
    await state.finish()
    return await message.reply('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑—É–ø–∏–Ω–µ–Ω–∞.')


@dp.message_handler(is_player=True, commands=['start', 'help'])
async def send_welcome(message: types.Message):
    """
    This handler will be called when user sends `/start` or `/help` command
    """
    await message.reply("Hi!\nI'm EchoBot!\nPowered by aiogram.")


@dp.message_handler(commands=['create'])
async def create_player_handler(message: types.Message):
    client = Client(DB_PASSWORD, 'Telegramia', 'players')
    user_id = message.from_user.id
    if client.get({'user_id': user_id}) is not None:
        return await message.reply('–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ')
    photo_url = 'https://raw.githubusercontent.com/mezgoodle/images/master/telegramia_intro.jpg'
    text = '–í—ñ—Ç–∞—î–º–æ —É –º–∞–≥—ñ—á–Ω–æ–º—É —Å–≤—ñ—Ç—ñ *Telegramia*. –¶–µ–π —Å–≤—ñ—Ç –ø–æ–≤–µ–Ω –ø—Ä–∏–≥–æ–¥, —Ü—ñ–∫–∞–≤–∏—Ö –ª—é–¥–µ–π, –ø—ñ–¥—Å—Ç—É–ø–Ω–∏—Ö –≤–æ—Ä–æ–≥—ñ–≤, ' \
           '–≤–µ–ª–∏–∫–∏—Ö –¥–µ—Ä–∂–∞–≤ —ñ —â–µ –±–∞–≥–∞—Ç–æ —á–æ–≥–æ —ñ–Ω—à–æ–≥–æ...–°–∫–æ—Ä—ñ—à–µ –ø–æ—á–∏–Ω–∞–π —Å–≤–æ—é –ø–æ–¥–æ—Ä–æ–∂. –î–ª—è –ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä–∏ –∫—Ä–∞—ó–Ω—É, ' \
           '—É —è–∫—É –≤—ñ–¥–ø—Ä–∞–≤–∏—à—Å—è, —â–æ–± –ø—ñ–¥–∫–æ—Ä—é–≤–∞—Ç–∏ —Ü–µ–π —Å–≤—ñ—Ç'
    markup = await create_keyboard('countries', 'name')
    await Player.nation.set()
    await message.answer_photo(photo_url, text, parse_mode='Markdown', reply_markup=markup)


@dp.message_handler(state=Player.nation)
async def answer_repo_name_issue(message: types.Message, state: FSMContext) -> types.Message:
    nation = message.text
    user_id = message.from_user.id
    telegram_name = message.from_user.username
    client = Client(DB_PASSWORD, 'Telegramia', 'countries')
    country = client.get({'name': nation})
    await state.update_data({'nation': nation})
    await state.update_data({'user_id': user_id})
    await state.update_data({'telegram_name': telegram_name})
    await state.update_data({'level': 1.})
    await state.update_data({'experience': 0.})
    await state.update_data({'money': 100.})
    await state.update_data({'items': []})
    await state.update_data({'mount': {'name': ''}})
    await state.update_data({'health': 100.})
    await state.update_data({'energy': 60.})
    await state.update_data({'current_state': country['capital']})
    await Player.name.set()
    return await message.answer('–ù–∞–ø–∏—à–∏, —è–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏')


@dp.message_handler(state=Player.name)
async def answer_repo_name_issue(message: types.Message, state: FSMContext) -> types.Message:
    name = message.text
    await state.update_data({'name': name})
    markup = await create_keyboard('classes', 'name')
    await Player.hero_class.set()
    return await message.answer('–û–±–µ—Ä–∏ —Å–≤—ñ–π –∫–ª–∞—Å', reply_markup=markup)


@dp.message_handler(state=Player.hero_class)
async def answer_repo_name_issue(message: types.Message, state: FSMContext) -> types.Message:
    class_name = message.text
    await state.update_data({'hero_class': class_name})
    client = Client(DB_PASSWORD, 'Telegramia', 'classes')
    class_ = client.get({'name': class_name})
    await state.update_data({'strength': class_['characteristics']['strength']})
    await state.update_data({'agility': class_['characteristics']['agility']})
    await state.update_data({'intuition': class_['characteristics']['intuition']})
    await state.update_data({'intelligence': class_['characteristics']['intelligence']})
    data = await state.get_data()
    await state.finish()
    text = await prepare_player_info(data)
    client = Client(DB_PASSWORD, 'Telegramia', 'players')
    client.insert(data)
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton('–¢–∞–∫', callback_data='Yes'),
               types.InlineKeyboardButton('–ù—ñ', callback_data='No'))
    await message.answer(text, parse_mode='Markdown')
    return await message.answer('–í–∞—Å –∑–∞–¥–æ–≤—ñ–ª—å–Ω—è—î –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂?', reply_markup=markup)


@dp.message_handler()
async def echo(message: types.Message):
    # old style:
    # await bot.send_message(message.chat.id, message.text)

    await message.answer(message.text)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
